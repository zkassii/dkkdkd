Для выполнения вашего задания по созданию слоя доступа к данным и формированию строки подключения, давайте разобьем задачу на несколько этапов и предоставим примерный код для каждого из них.

### 5.1 Создание слоя доступа к данным и формирование строки подключения

#### 5.1.1 Создание проектов
Создайте два проекта:
1. **Библиотека** (например, `DataAccessLibrary`)
2. **Оконное приложение** (например, `DataAccessApp`)

Добавьте необходимые пакеты через NuGet:
- `Microsoft.Data.SqlClient` для работы с MSSQL.
- `Microsoft.Data.Sqlite` для работы с SQLite.

#### 5.1.2 Создание интерфейса и классов

```csharp
// Интерфейс IDatabase
public interface IDatabase
{
    int ExecuteQuery(string query);
    bool UpdateGame(int id, string newName, decimal newPrice);
    void InsertGame(string name, decimal price, int releaseYear);
}

// Класс для работы с MSSQL
public class SqlDatabase : IDatabase
{
    private readonly string _connectionString;

    public SqlDatabase(string server, string database, string username, string password)
    {
        var builder = new SqlConnectionStringBuilder
        {
            DataSource = server,
            InitialCatalog = database,
            UserID = username,
            Password = password
        };
        _connectionString = builder.ConnectionString;
    }

    public int ExecuteQuery(string query)
    {
        // Реализация выполнения SQL команды
    }

    public bool UpdateGame(int id, string newName, decimal newPrice)
    {
        // Реализация обновления игры
    }

    public void InsertGame(string name, decimal price, int releaseYear)
    {
        // Реализация вставки игры
    }
}

// Класс для работы с SQLite
public class SqliteDatabase : IDatabase
{
    private readonly string _connectionString;

    public SqliteDatabase(string filePath)
    {
        var builder = new SqliteConnectionStringBuilder
        {
            DataSource = filePath
        };
        _connectionString = builder.ConnectionString;
    }

    public int ExecuteQuery(string query)
    {
        // Реализация выполнения SQL команды
    }

    public bool UpdateGame(int id, string newName, decimal newPrice)
    {
        // Реализация обновления игры
    }

    public void InsertGame(string name, decimal price, int releaseYear)
    {
        // Реализация вставки игры
    }
}
```

#### 5.1.3 Добавление конструктора и строки подключения
В приведенных выше классах уже добавлены конструкторы и строка подключения.

#### 5.1.4 В оконное приложение
В вашем оконном приложении добавьте поле для хранения экземпляра `IDatabase`:

```csharp
// В классе формы
private IDatabase _database;

public MainForm()
{
    InitializeComponent();
    _database = new SqlDatabase("server", "database", "username", "password"); // Для MSSQL
    // Или для SQLite:
    //_database = new SqliteDatabase("path_to_database_file");
    Debug.WriteLine(_database.ToString());
}
```

### 5.2 Создание метода для выполнения SQL-команды

#### 5.2.1 Добавление метода в интерфейс
Метод `ExecuteQuery` уже добавлен в интерфейс.

#### 5.2.2 Реализация метода в классах
Пример реализации метода `ExecuteQuery` для MSSQL:

```csharp
public int ExecuteQuery(string query)
{
    using (var connection = new SqlConnection(_connectionString))
    {
        connection.Open();
        using (var command = new SqlCommand(query, connection))
        {
            return command.ExecuteNonQuery();
        }
    }
}
```

Аналогично реализуйте для `SqliteDatabase`.

#### 5.2.3 Проверка работы метода
В вашем оконном приложении добавьте обработчик для выполнения SQL-команды:

```csharp
private void ExecuteButton_Click(object sender, EventArgs e)
{
    string query = "UPDATE Games SET Price = Price + 1"; // Пример запроса
    try
    {
        int affectedRows = _database.ExecuteQuery(query);
        MessageBox.Show($"Количество измененных строк: {affectedRows}");
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Ошибка: {ex.Message}");
    }
}
```

### 5.3 Создание метода для выполнения SQL-команды без параметров

#### 5.3.1 Добавление метода в интерфейс
```csharp
bool UpdateGame(int id, string newName, decimal newPrice);
```

#### 5.3.2 Реализация метода
Пример реализации для MSSQL:

```csharp
public bool UpdateGame(int id, string newName, decimal newPrice)
{
    string query = $"UPDATE Games SET Name = '{newName}', Price = {newPrice} WHERE Id = {id}";
    return ExecuteQuery(query) == 1;
}
```

#### 5.3.3 Проверка работы метода
Добавьте интерфейс для ввода данных и вызова метода:

```csharp
private void UpdateButton_Click(object sender, EventArgs e)
{
    int id = int.Parse(IDTextBox.Text);
    string newName = NameTextBox.Text;
    decimal newPrice = decimal.Parse(PriceTextBox.Text);

    try
    {
        bool success = _database.UpdateGame(id, newName, newPrice);
        MessageBox.Show(success ? "Игра обновлена." : "Не удалось обновить игру.");
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Ошибка: {ex.Message}");
    }
}
```

### 5.4 Создание метода для выполнения SQL-команды с параметрами

#### 5.4.1 Добавление метода в интерфейс
```csharp
void InsertGame(string name, decimal price, int releaseYear);
```

#### 5.4.2 Реализация метода
Пример реализации для MSSQL:

```csharp
public void InsertGame(string name, decimal price, int releaseYear)
{
    string query = "INSERT INTO Games (Name, Price, ReleaseYear) VALUES (@name, @price, @releaseYear)";
    using (var connection = new SqlConnection(_connectionString))
    {
        connection.Open();
        using (var command = new SqlCommand(query, connection))
        {
            command.Parameters.AddWithValue("@name", name);
            command.Parameters.AddWithValue("@price", price);
            command.Parameters.AddWithValue("@releaseYear", releaseYear);
            command.ExecuteNonQuery();
        }
    }
}
```

#### 5.4.3 Проверка работы метода
Добавьте интерфейс для ввода данных и вызова метода:

```csharp
private void InsertButton_Click(object sender, EventArgs e)
{
    string name = NameTextBox.Text;
    decimal price = decimal.Parse(PriceTextBox.Text);
    int year = int.Parse(YearTextBox.Text);

    try
    {
        _database.InsertGame(name, price, year);
        MessageBox.Show("Игра добавлена.");
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Ошибка: {ex.Message}");
    }
}
```

Теперь у вас есть базовая структура для доступа к данным и выполнения SQL-команд. Не забудьте обработать исключения и протестировать ваше приложение.
