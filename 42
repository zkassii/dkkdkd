# Разделение по заданиям

Я разделю приложение на отдельные классы для каждого задания, чтобы код был более организованным и соответствовал требованиям лабораторной работы.

## 1. Графический редактор (задание 5.1)

**InkCanvasEditor.xaml**
```xml
<UserControl x:Class="LabWork42.InkCanvasEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="5">
            <Button Content="Загрузить изображение" Click="LoadImage_Click" Margin="5"/>
            <ComboBox x:Name="colorPicker" Width="100" Margin="5" SelectedIndex="0" SelectionChanged="ColorPicker_SelectionChanged">
                <ComboBoxItem>Black</ComboBoxItem>
                <ComboBoxItem>Red</ComboBoxItem>
                <ComboBoxItem>Green</ComboBoxItem>
                <ComboBoxItem>Blue</ComboBoxItem>
                <ComboBoxItem>Yellow</ComboBoxItem>
            </ComboBox>
            <ComboBox x:Name="sizePicker" Width="100" Margin="5" SelectedIndex="0" SelectionChanged="SizePicker_SelectionChanged">
                <ComboBoxItem>1</ComboBoxItem>
                <ComboBoxItem>3</ComboBoxItem>
                <ComboBoxItem>5</ComboBoxItem>
                <ComboBoxItem>10</ComboBoxItem>
                <ComboBoxItem>20</ComboBoxItem>
            </ComboBox>
        </StackPanel>
        
        <InkCanvas x:Name="inkCanvas" Grid.Row="1" Background="LightGray"/>
    </Grid>
</UserControl>
```

**InkCanvasEditor.xaml.cs**
```csharp
using Microsoft.Win32;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Ink;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace LabWork42
{
    public partial class InkCanvasEditor : UserControl
    {
        public InkCanvasEditor()
        {
            InitializeComponent();
            inkCanvas.DefaultDrawingAttributes.Color = Colors.Black;
            inkCanvas.DefaultDrawingAttributes.Width = 1;
            inkCanvas.DefaultDrawingAttributes.Height = 1;
        }

        private void LoadImage_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Image files (*.jpg, *.jpeg, *.png)|*.jpg;*.jpeg;*.png|All files (*.*)|*.*";
            
            if (openFileDialog.ShowDialog() == true)
            {
                inkCanvas.Strokes.Clear();
                BitmapImage bitmap = new BitmapImage(new Uri(openFileDialog.FileName));
                inkCanvas.Background = new ImageBrush(bitmap);
            }
        }

        private void ColorPicker_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (colorPicker.SelectedItem != null)
            {
                string colorName = (colorPicker.SelectedItem as ComboBoxItem).Content.ToString();
                Color color = (Color)ColorConverter.ConvertFromString(colorName);
                inkCanvas.DefaultDrawingAttributes.Color = color;
            }
        }

        private void SizePicker_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sizePicker.SelectedItem != null)
            {
                double size = double.Parse((sizePicker.SelectedItem as ComboBoxItem).Content.ToString());
                inkCanvas.DefaultDrawingAttributes.Width = size;
                inkCanvas.DefaultDrawingAttributes.Height = size;
            }
        }
    }
}
```

## 2. Карусель изображений (задание 5.2)

**ImageCarousel.xaml**
```xml
<UserControl x:Class="LabWork42.ImageCarousel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="5">
            <Button Content="Выбрать папку" Click="SelectFolder_Click" Margin="5"/>
            <Button Content="Старт" Click="StartCarousel_Click" Margin="5" Width="60"/>
            <Button Content="Стоп" Click="StopCarousel_Click" Margin="5" Width="60"/>
        </StackPanel>
        
        <Image x:Name="carouselImage" Grid.Row="1" Stretch="Uniform"/>
    </Grid>
</UserControl>
```

**ImageCarousel.xaml.cs**
```csharp
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace LabWork42
{
    public partial class ImageCarousel : UserControl
    {
        private List<string> imageFiles = new List<string>();
        private int currentImageIndex = 0;
        private DispatcherTimer carouselTimer;

        public ImageCarousel()
        {
            InitializeComponent();
            carouselTimer = new DispatcherTimer();
            carouselTimer.Interval = TimeSpan.FromSeconds(0.3);
            carouselTimer.Tick += CarouselTimer_Tick;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog();
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                imageFiles = Directory.GetFiles(dialog.SelectedPath, "*.jpg")
                    .Concat(Directory.GetFiles(dialog.SelectedPath, "*.jpeg"))
                    .Concat(Directory.GetFiles(dialog.SelectedPath, "*.png"))
                    .ToList();
                
                if (imageFiles.Count > 0)
                {
                    currentImageIndex = 0;
                    ShowCurrentImage();
                }
                else
                {
                    MessageBox.Show("В выбранной папке нет изображений.");
                }
            }
        }

        private void StartCarousel_Click(object sender, RoutedEventArgs e)
        {
            if (imageFiles.Count > 0)
            {
                carouselTimer.Start();
            }
        }

        private void StopCarousel_Click(object sender, RoutedEventArgs e)
        {
            carouselTimer.Stop();
        }

        private void CarouselTimer_Tick(object sender, EventArgs e)
        {
            currentImageIndex = (currentImageIndex + 1) % imageFiles.Count;
            ShowCurrentImage();
        }

        private void ShowCurrentImage()
        {
            if (currentImageIndex >= 0 && currentImageIndex < imageFiles.Count)
            {
                BitmapImage bitmap = new BitmapImage(new Uri(imageFiles[currentImageIndex]));
                carouselImage.Source = bitmap;
            }
        }
    }
}
```

## 3. Воспроизведение аудио и видео (задание 5.3)

**AudioVideoPlayer.xaml**
```xml
<UserControl x:Class="LabWork42.AudioVideoPlayer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <MediaElement x:Name="videoPlayer" Grid.Row="0" LoadedBehavior="Play" Stretch="Uniform"/>
        
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5">
            <Button Content="Системный звук 1" Click="PlaySystemSound1_Click" Margin="5" Width="100"/>
            <Button Content="Системный звук 2" Click="PlaySystemSound2_Click" Margin="5" Width="100"/>
            <Button Content="Загрузить звук" Click="LoadSound_Click" Margin="5" Width="100"/>
        </StackPanel>
    </Grid>
</UserControl>
```

**AudioVideoPlayer.xaml.cs**
```csharp
using Microsoft.Win32;
using System;
using System.Media;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace LabWork42
{
    public partial class AudioVideoPlayer : UserControl
    {
        public AudioVideoPlayer()
        {
            InitializeComponent();
            // Загрузка тестового видео
            videoPlayer.Source = new Uri("http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4");
        }

        private void PlaySystemSound1_Click(object sender, RoutedEventArgs e)
        {
            SystemSounds.Beep.Play();
        }

        private void PlaySystemSound2_Click(object sender, RoutedEventArgs e)
        {
            SystemSounds.Asterisk.Play();
        }

        private void LoadSound_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Audio files (*.wav, *.mp3)|*.wav;*.mp3|All files (*.*)|*.*";
            
            if (openFileDialog.ShowDialog() == true)
            {
                var player = new MediaPlayer();
                player.Open(new Uri(openFileDialog.FileName));
                player.Play();
            }
        }
    }
}
```

## 4. Медиапроигрыватель (задания 5.4 и 5.5)

**MediaPlayerControl.xaml**
```xml
<UserControl x:Class="LabWork42.MediaPlayerControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <MediaElement x:Name="mediaPlayer" Grid.Row="0" Stretch="Uniform"/>
        
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" Margin="5">
            <Button Content="Выбрать файл(ы)" Click="SelectMediaFiles_Click" Margin="5" Width="100"/>
            <Button Content="Play" Click="PlayMedia_Click" Margin="5" Width="60"/>
            <Button Content="Pause" Click="PauseMedia_Click" Margin="5" Width="60"/>
            <Button Content="Stop" Click="StopMedia_Click" Margin="5" Width="60"/>
            <TextBlock x:Name="timeText" Margin="5" VerticalAlignment="Center" Width="150"/>
        </StackPanel>
        
        <ListBox x:Name="playlistBox" Grid.Row="2" Height="100" Margin="5" 
                 SelectionChanged="PlaylistBox_SelectionChanged"/>
    </Grid>
</UserControl>
```

**MediaPlayerControl.xaml.cs**
```csharp
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace LabWork42
{
    public partial class MediaPlayerControl : UserControl
    {
        private List<string> playlist = new List<string>();
        private DispatcherTimer timer;

        public MediaPlayerControl()
        {
            InitializeComponent();
            mediaPlayer.MediaOpened += MediaPlayer_MediaOpened;
            mediaPlayer.MediaEnded += MediaPlayer_MediaEnded;
            
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += (s, args) => UpdateTimeDisplay();
        }

        private void SelectMediaFiles_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Multiselect = true;
            openFileDialog.Filter = "Media files (*.mp3, *.mp4, *.wmv, *.wav)|*.mp3;*.mp4;*.wmv;*.wav|All files (*.*)|*.*";
            
            if (openFileDialog.ShowDialog() == true)
            {
                playlist.Clear();
                playlist.AddRange(openFileDialog.FileNames);
                playlistBox.ItemsSource = null;
                playlistBox.ItemsSource = playlist.Select(Path.GetFileName);
                
                if (playlist.Count > 0)
                {
                    playlistBox.SelectedIndex = 0;
                }
            }
        }

        private void PlayMedia_Click(object sender, RoutedEventArgs e)
        {
            if (mediaPlayer.Source != null)
            {
                mediaPlayer.Play();
                timer.Start();
            }
        }

        private void PauseMedia_Click(object sender, RoutedEventArgs e)
        {
            mediaPlayer.Pause();
            timer.Stop();
        }

        private void StopMedia_Click(object sender, RoutedEventArgs e)
        {
            mediaPlayer.Stop();
            timer.Stop();
            UpdateTimeDisplay();
        }

        private void MediaPlayer_MediaOpened(object sender, RoutedEventArgs e)
        {
            UpdateTimeDisplay();
        }

        private void MediaPlayer_MediaEnded(object sender, RoutedEventArgs e)
        {
            PlayNextMedia();
        }

        private void PlaylistBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (playlistBox.SelectedIndex >= 0 && playlistBox.SelectedIndex < playlist.Count)
            {
                mediaPlayer.Source = new Uri(playlist[playlistBox.SelectedIndex]);
                mediaPlayer.Play();
                timer.Start();
            }
        }

        private void UpdateTimeDisplay()
        {
            if (mediaPlayer.NaturalDuration.HasTimeSpan)
            {
                timeText.Text = $"{mediaPlayer.Position.ToString(@"hh\:mm\:ss")} / {mediaPlayer.NaturalDuration.TimeSpan.ToString(@"hh\:mm\:ss")}";
            }
        }

        private void PlayNextMedia()
        {
            if (playlist.Count == 0) return;
            
            int nextIndex = (playlistBox.SelectedIndex + 1) % playlist.Count;
            playlistBox.SelectedIndex = nextIndex;
        }
    }
}
```

## Главное окно приложения

**MainWindow.xaml**
```xml
<Window x:Class="LabWork42.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LabWork42"
        mc:Ignorable="d"
        Title="Мультимедиа приложение" Height="600" Width="800">
    <TabControl>
        <TabItem Header="Графический редактор">
            <local:InkCanvasEditor/>
        </TabItem>
        
        <TabItem Header="Карусель изображений">
            <local:ImageCarousel/>
        </TabItem>
        
        <TabItem Header="Аудио/Видео">
            <local:AudioVideoPlayer/>
        </TabItem>
        
        <TabItem Header="Медиапроигрыватель">
            <local:MediaPlayerControl/>
        </TabItem>
    </TabControl>
</Window>
```

**MainWindow.xaml.cs**
```csharp
using System.Windows;

namespace LabWork42
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }
}
```

## Ответы на контрольные вопросы (в отдельном файле)

**Answers.docx** (или можно добавить в приложение как отдельную вкладку)

1. **Что такое "мультимедиа"?**
   Мультимедиа - это контент, который использует комбинацию различных форм информации (текст, аудио, изображения, анимация, видео) в интерактивном формате.

2. **Какие элементы позволяют отображать изображения в приложениях WPF?**
   Основные элементы для отображения изображений в WPF:
   - `Image` - для статических изображений
   - `InkCanvas` - для рисования и отображения изображений с возможностью рисования поверх
   - `ImageBrush` - для использования изображений в качестве фона других элементов

3. **Какие элементы позволяют воспроизводить аудио в приложениях WPF?**
   Для воспроизведения аудио в WPF можно использовать:
   - `MediaElement` - основной элемент для воспроизведения аудио и видео
   - `SoundPlayer` (из System.Media) - для простых звуковых файлов
   - `MediaPlayer` (из System.Windows.Media) - более продвинутый вариант для управления воспроизведением

4. **Какие элементы позволяют воспроизводить видео в приложениях WPF?**
   Для воспроизведения видео в WPF используется:
   - `MediaElement` - основной элемент для воспроизведения видео
   - Можно также использовать DirectX или другие библиотеки через interoperability

## Вывод

В ходе выполнения лабораторной работы было разработано мультимедийное приложение на WPF, разделенное на четыре основных модуля, соответствующих заданиям:

1. Графический редактор с InkCanvas
2. Карусель изображений с автоматической сменой
3. Воспроизведение видео с системными звуками
4. Полнофункциональный медиаплеер с плейлистом

Каждый модуль реализован как отдельный UserControl, что делает код более организованным и удобным для сопровождения. Приложение демонстрирует основные возможности работы с мультимедиа в WPF.
