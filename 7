using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;

public static class DataAccessLayer
{
    // Закрытые поля для хранения настроек подключения
    private static string _server = "localhost";
    private static string _database = "CinemaDB";
    private static string _username = "sa";
    private static string _password = "password";

    // Свойство для получения строки подключения
    public static string ConnectionString
    {
        get
        {
            var builder = new SqlConnectionStringBuilder
            {
                DataSource = _server,
                InitialCatalog = _database,
                UserID = _username,
                Password = _password,
                TrustServerCertificate = true
            };
            return builder.ConnectionString;
        }
    }

    // 5.1.2 Метод для изменения настроек подключения
    public static void ChangeConnectionSettings(string server, string database, string username, string password)
    {
        _server = server;
        _database = database;
        _username = username;
        _password = password;
    }

    // 5.1.3 Метод проверки возможности подключения к БД
    public static async Task<bool> TestConnectionAsync()
    {
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();
                return true;
            }
        }
        catch
        {
            return false;
        }
    }

    // 5.2.1 Метод для выполнения SQL-команд (ExecuteNonQuery)
    public static async Task<int> ExecuteNonQueryAsync(string sqlCommand)
    {
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sqlCommand, connection))
            {
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка выполнения команды: {ex.Message}");
            return -1;
        }
    }

    // 5.2.2 Метод для выполнения SQL-команд (ExecuteScalar)
    public static async Task<object> ExecuteScalarAsync(string sqlCommand)
    {
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sqlCommand, connection))
            {
                await connection.OpenAsync();
                return await command.ExecuteScalarAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка выполнения команды: {ex.Message}");
            return null;
        }
    }

    // 5.3.1 Метод для изменения цены билета
    public static async Task<int> UpdateTicketPriceAsync(string ticketType, decimal newPrice)
    {
        string sql = "UPDATE Tickets SET Price = @Price WHERE TicketType = @TicketType";
        
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Price", newPrice);
                command.Parameters.AddWithValue("@TicketType", ticketType);
                
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка обновления цены: {ex.Message}");
            return -1;
        }
    }

    // 5.4.2 Метод для загрузки файла в БД
    public static async Task<int> UploadPosterAsync(int filmId, string filePath)
    {
        string sql = "UPDATE Films SET Poster = @Poster WHERE FilmId = @FilmId";
        
        try
        {
            byte[] fileData = File.ReadAllBytes(filePath);
            
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@Poster", fileData);
                command.Parameters.AddWithValue("@FilmId", filmId);
                
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки постера: {ex.Message}");
            return -1;
        }
    }

    // 5.4.3 Метод для сохранения файла из БД
    public static async Task<bool> DownloadPosterAsync(int filmId, string savePath)
    {
        string sql = "SELECT Poster FROM Films WHERE FilmId = @FilmId";
        
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sql, connection))
            {
                command.Parameters.AddWithValue("@FilmId", filmId);
                
                await connection.OpenAsync();
                var result = await command.ExecuteScalarAsync();
                
                if (result != null && result != DBNull.Value)
                {
                    byte[] fileData = (byte[])result;
                    File.WriteAllBytes(savePath, fileData);
                    return true;
                }
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка сохранения постера: {ex.Message}");
            return false;
        }
    }

    // 5.5.1 Метод для выборки данных в формате DataTable
    public static async Task<DataTable> GetUpcomingFilmsAsync()
    {
        string sql = "SELECT * FROM Films WHERE ReleaseDate > GETDATE()";
        var dataTable = new DataTable();
        
        try
        {
            using (var connection = new SqlConnection(ConnectionString))
            using (var command = new SqlCommand(sql, connection))
            {
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    dataTable.Load(reader);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка получения данных: {ex.Message}");
        }
        
        return dataTable;
    }
}




using System;
using System.Data;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("=== Тестирование слоя доступа к данным (DAL) ===\n");

        // 5.1.1 Тестирование свойства ConnectionString
        Console.WriteLine("1. Тестирование строки подключения:");
        Console.WriteLine($"Строка подключения: {DataAccessLayer.ConnectionString}\n");

        // 5.1.2 Тестирование изменения настроек подключения
        Console.WriteLine("2. Тестирование изменения настроек:");
        DataAccessLayer.ChangeConnectionSettings("NEW_SERVER", "NEW_DB", "new_user", "new_pass");
        Console.WriteLine($"Новая строка подключения: {DataAccessLayer.ConnectionString}\n");

        // Возвращаем оригинальные настройки
        DataAccessLayer.ChangeConnectionSettings("localhost", "CinemaDB", "sa", "password");

        // 5.1.3 Тестирование подключения к БД
        Console.WriteLine("3. Тестирование подключения к БД:");
        bool isConnected = await DataAccessLayer.TestConnectionAsync();
        Console.WriteLine($"Подключение к БД: {(isConnected ? "УСПЕШНО" : "НЕ УДАЛОСЬ")}\n");

        // 5.2.1 Тестирование ExecuteNonQueryAsync
        Console.WriteLine("4. Тестирование ExecuteNonQueryAsync:");
        string createTableSql = @"
            IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='TestTable' AND xtype='U')
            CREATE TABLE TestTable (Id INT IDENTITY(1,1), Name NVARCHAR(50))";
        int result = await DataAccessLayer.ExecuteNonQueryAsync(createTableSql);
        Console.WriteLine($"Таблица создана. Затронуто строк: {result}\n");

        // 5.2.2 Тестирование ExecuteScalarAsync
        Console.WriteLine("5. Тестирование ExecuteScalarAsync:");
        object scalarResult = await DataAccessLayer.ExecuteScalarAsync("SELECT COUNT(*) FROM TestTable");
        Console.WriteLine($"Количество записей в TestTable: {scalarResult}\n");

        // 5.3.2 Тестирование обновления цены билета
        Console.WriteLine("6. Тестирование обновления цены билета:");
        int updateResult = await DataAccessLayer.UpdateTicketPriceAsync("Standard", 350.50m);
        Console.WriteLine($"Обновлено записей: {updateResult}\n");

        // 5.4.2 Тестирование загрузки файла в БД
        Console.WriteLine("7. Тестирование загрузки постера:");
        // int uploadResult = await DataAccessLayer.UploadPosterAsync(1, @"C:\posters\film1.jpg");
        // Console.WriteLine($"Постер загружен. Затронуто строк: {uploadResult}\n");

        // 5.4.3 Тестирование сохранения файла из БД
        Console.WriteLine("8. Тестирование сохранения постера:");
        // bool downloadResult = await DataAccessLayer.DownloadPosterAsync(1, @"C:\downloads\film1_poster.jpg");
        // Console.WriteLine($"Постер сохранен: {downloadResult}\n");

        // 5.5.2 Тестирование получения списка фильмов
        Console.WriteLine("9. Тестирование получения списка фильмов:");
        DataTable films = await DataAccessLayer.GetUpcomingFilmsAsync();
        Console.WriteLine($"Найдено фильмов: {films.Rows.Count}");
        foreach (DataRow row in films.Rows)
        {
            Console.WriteLine($"- {row["Title"]} (Дата выхода: {row["ReleaseDate"]})");
        }

        Console.WriteLine("\n=== Тестирование завершено ===");
    }
}
