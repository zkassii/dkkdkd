8using Microsoft.EntityFrameworkCore;
using System.Data;
using Microsoft.Data.SqlClient;

public class CinemaService
{
    private readonly CinemaContext _context;

    public CinemaService(CinemaContext context)
    {
        _context = context;
    }

    // 5.1 FromSqlRaw - сортировка фильмов по указанному столбцу
    public List<Movie> GetMoviesSorted(string sortColumn)
    {
        var validColumns = new[] { "Title", "Year", "Price", "Genre" };
        
        if (!validColumns.Contains(sortColumn))
            throw new ArgumentException("Недопустимый столбец для сортировки");

        var sql = $"SELECT * FROM Movies ORDER BY {sortColumn}";
        
        return _context.Movies
            .FromSqlRaw(sql)
            .AsNoTracking()
            .ToList();
    }

    // 5.2 FromSql с параметрами - фильмы по названию и году
    public List<Movie> GetMoviesByTitleAndYear(string title, int minYear)
    {
        var sql = "SELECT * FROM Movies WHERE Title = {0} AND Year >= {1}";
        
        return _context.Movies
            .FromSqlRaw(sql, title, minYear)
            .AsNoTracking()
            .ToList();
    }

    // 5.3 ExecuteSqlRaw - увеличение цены сеансов в кинозале
    public int IncreaseSessionPrices(int cinemaHall, decimal increaseAmount)
    {
        var sql = "UPDATE Sessions SET Price = Price + {0} WHERE CinemaHall = {1}";
        
        var affectedRows = _context.Database.ExecuteSqlRaw(sql, increaseAmount, cinemaHall);
        _context.SaveChanges();
        
        return affectedRows;
    }

    // 5.4 SqlQuery - список жанров фильма по ID
    public List<string> GetMovieGenres(int movieId)
    {
        var sql = "SELECT Genre FROM Movies WHERE Id = @movieId";
        
        var connection = _context.Database.GetDbConnection();
        using var command = connection.CreateCommand();
        
        command.CommandText = sql;
        command.Parameters.Add(new SqlParameter("@movieId", movieId));
        
        if (connection.State != ConnectionState.Open)
            connection.Open();
            
        var genres = new List<string>();
        using var reader = command.ExecuteReader();
        
        while (reader.Read())
        {
            if (!reader.IsDBNull(0))
                genres.Add(reader.GetString(0));
        }
        
        return genres;
    }

    // 5.5 SqlQuery - дата и время сеанса по номеру билета
    public DateTime? GetSessionDateTimeByTicket(int ticketId)
    {
        var sql = @"
            SELECT s.DateTime 
            FROM Sessions s
            INNER JOIN Tickets t ON s.Id = t.SessionId
            WHERE t.Id = @ticketId";
            
        var connection = _context.Database.GetDbConnection();
        using var command = connection.CreateCommand();
        
        command.CommandText = sql;
        command.Parameters.Add(new SqlParameter("@ticketId", ticketId));
        
        if (connection.State != ConnectionState.Open)
            connection.Open();
            
        using var reader = command.ExecuteReader();
        
        if (reader.Read() && !reader.IsDBNull(0))
            return reader.GetDateTime(0);
        
        return null;
    }

    // 5.6.1 EF.Functions.Like - поиск фильмов по диапазону букв
    public List<Movie> GetMoviesByLetterRange(char startLetter, char endLetter)
    {
        var pattern = $"[{startLetter}-{endLetter}]%";
        
        return _context.Movies
            .Where(m => EF.Functions.Like(m.Title, pattern))
            .AsNoTracking()
            .ToList();
    }

    // 5.6.2 Агрегатные функции - статистика цен сеансов по фильму
    public (decimal min, decimal max, decimal avg) GetSessionPriceStats(int movieId)
    {
        var stats = _context.Sessions
            .Where(s => s.MovieId == movieId)
            .Select(s => s.Price)
            .AsNoTracking()
            .ToList();
            
        if (!stats.Any())
            return (0, 0, 0);
            
        return (
            stats.Min(),
            stats.Max(),
            stats.Average()
        );
    }

    // 5.7 Вызов хранимой процедуры со входными параметрами
    public List<Ticket> GetTicketsByPhone(string phone)
    {
        var sql = "EXEC GetTicketsByPhone @Phone";
        
        return _context.Tickets
            .FromSqlRaw(sql, new SqlParameter("@Phone", phone))
            .AsNoTracking()
            .ToList();
    }

    // 5.8 Вызов хранимой процедуры с выходными парамет






using Microsoft.EntityFrameworkCore;

class Program
{
    static void Main()
    {
        using var context = new CinemaContext();
        
        // Создаем базу данных и заполняем тестовыми данными
        InitializeDatabase(context);
        
        var service = new CinemaService(context);
        
        Console.WriteLine("=== Тестирование методов CinemaService ===\n");

        // 5.1 Тестирование сортировки
        TestSorting(service);
        
        // 5.2 Тестирование поиска по названию и году
        TestSearchByTitleAndYear(service);
        
        // 5.3 Тестирование обновления цен
        TestPriceUpdate(service);
        
        // 5.4 Тестирование получения жанров
        TestGetGenres(service);
        
        // 5.5 Тестирование получения даты сеанса
        TestGetSessionDateTime(service);
        
        // 5.6.1 Тестирование поиска по диапазону букв
        TestLetterRangeSearch(service);
        
        // 5.6.2 Тестирование статистики цен
        TestPriceStatistics(service);
        
        // 5.7 Тестирование хранимой процедуры с входными параметрами
        TestTicketsByPhone(service);
        
        // 5.8 Тестирование хранимой процедуры с выходными параметрами
        TestAddVisitor(service);
        
        // 5.9 Тестирование табличной функции
        TestSessionsByMovie(service);

        Console.WriteLine("\nВсе тесты завершены!");
    }

    static void InitializeDatabase(CinemaContext context)
    {
        context.Database.EnsureDeleted();
        context.Database.EnsureCreated();

        // Добавляем тестовые данные
        var movies = new[]
        {
            new Movie { Title = "Аватар", Year = 2009, Genre = "Фантастика", Price = 300 },
            new Movie { Title = "Бэтмен", Year = 2022, Genre = "Боевик", Price = 350 },
            new Movie { Title = "Властелин колец", Year = 2001, Genre = "Фэнтези", Price = 250 },
            new Movie { Title = "Гарри Поттер", Year = 2001, Genre = "Фэнтези", Price = 280 },
            new Movie { Title = "Дюна", Year = 2021, Genre = "Фантастика", Price = 400 }
        };

        context.Movies.AddRange(movies);
        context.SaveChanges();

        var sessions = new[]
        {
            new Session { DateTime = DateTime.Now.AddDays(1), Price = 300, CinemaHall = 1, MovieId = 1 },
            new Session { DateTime = DateTime.Now.AddDays(2), Price = 350, CinemaHall = 2, MovieId = 1 },
            new Session { DateTime = DateTime.Now.AddDays(1), Price = 320, CinemaHall = 1, MovieId = 2 },
            new Session { DateTime = DateTime.Now.AddDays(3), Price = 280, CinemaHall = 3, MovieId = 3 }
        };

        context.Sessions.AddRange(sessions);
        context.SaveChanges();

        var visitors = new[]
        {
            new Visitor { Phone = "+79123456789", Name = "Иван Иванов" },
            new Visitor { Phone = "+79987654321", Name = "Петр Петров" }
        };

        context.Visitors.AddRange(visitors);
        context.SaveChanges();

        var tickets = new[]
        {
            new Ticket { SessionId = 1, VisitorId = 1, SeatNumber = 1, Price = 300 },
            new Ticket { SessionId = 2, VisitorId = 1, SeatNumber = 5, Price = 350 },
            new Ticket { SessionId = 3, VisitorId = 2, SeatNumber = 3, Price = 320 }
        };

        context.Tickets.AddRange(tickets);
        context.SaveChanges();
    }

    static void TestSorting(CinemaService service)
    {
        Console.WriteLine("5.1 Сортировка фильмов по названию:");
        var movies = service.GetMoviesSorted("Title");
        foreach (var movie in movies)
        {
            Console.WriteLine($"  {movie.Title} ({movie.Year})");
        }
    }

    static void TestSearchByTitleAndYear(CinemaService service)
    {
        Console.WriteLine("\n5.2 Поиск фильмов по названию и году:");
        var movies = service.GetMoviesByTitleAndYear("Аватар", 2000);
        foreach (var movie in movies)
        {
            Console.WriteLine($"  {movie.Title} ({movie.Year}) - {movie.Genre}");
        }
    }

    static void TestPriceUpdate(CinemaService service)
    {
        Console.WriteLine("\n5.3 Увеличение цен сеансов:");
        var affected = service.IncreaseSessionPrices(1, 50);
        Console.WriteLine($"  Обновлено {affected} строк");
    }

    static void TestGetGenres(CinemaService service)
    {
        Console.WriteLine("\n5.4 Получение жанров фильма:");
        var genres = service.GetMovieGenres(1);
        Console.WriteLine($"  Жанры: {string.Join(", ", genres)}");
    }

    static void TestGetSessionDateTime(CinemaService service)
    {
        Console.WriteLine("\n5.5 Получение даты сеанса по билету:");
        var dateTime = service.GetSessionDateTimeByTicket(1);
        Console.WriteLine($"  Дата сеанса: {dateTime}");
    }

    static void TestLetterRangeSearch(CinemaService service)
    {
        Console.WriteLine("\n5.6.1 Поиск фильмов по диапазону букв (А-Г):");
        var movies = service.GetMoviesByLetterRange('А', 'Г');
        foreach (var movie in movies)
        {
            Console.WriteLine($"  {movie.Title}");
        }
    }

    static void TestPriceStatistics(CinemaService service)
    {
        Console.WriteLine("\n5.6.2 Статистика цен сеансов:");
        var stats = service.GetSessionPriceStats(1);
        Console.WriteLine($"  Мин: {stats.min}, Макс: {stats.max}, Сред: {stats.avg:F2}");
    }

    static void TestTicketsByPhone(CinemaService service)
    {
        Console.WriteLine("\n5.7 Билеты по номеру телефона:");
        var tickets = service.GetTicketsByPhone("+79123456789");
        Console.WriteLine($"  Найдено билетов: {tickets.Count}");
    }

    static void TestAddVisitor(CinemaService service)
    {
        Console.WriteLine("\n5.8 Добавление посетителя:");
        var newId = service.AddVisitorWithOutputParam("+79998887766", "Сергей Сергеев");
        Console.WriteLine($"  Новый ID посетителя: {newId}");
    }

    static void TestSessionsByMovie(CinemaService service)
    {
        Console.WriteLine("\n5.9 Сеансы по ID фильма:");
        var sessions = service.GetSessionsByMovieId(1);
        Console.WriteLine($"  Найдено сеансов: {sessions.Count}");
    }
}
